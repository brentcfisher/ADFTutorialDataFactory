{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFTutorialDataFactory-brent"
		},
		"ADLSGen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLSGen2'"
		},
		"measadvtestftp_privateKeyContent": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKeyContent' of 'measadvtestftp'"
		},
		"measadvtestftp_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'measadvtestftp'"
		},
		"ADLSGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://measadvtestftp.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://MeasAdvKeyVault-dev.vault.azure.net/"
		},
		"AzureSqlDatabase1_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "SQL-CONNECTION-STRING-904ab117-ffda-46e9-aabd-869b63daaafa"
		},
		"DataGateway_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dev-measadv.capdev-connect.aveva.com/api/v1/measconnection/execPostproc/"
		},
		"measadvtestftp_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "measadvtestftp.blob.core.windows.net"
		},
		"measadvtestftp_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "measadvtestftp.measadvftpuser01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_2pj')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "output",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[writeReadingRawDy2]",
								"sqlWriterTableType": "writeReadingRawDyParams",
								"storedProcedureTableTypeParameterName": "params",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "objName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "objName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "orgName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "orgName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "localTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "localTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "editStateName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "editStateName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "dqInfoName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dqInfoName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "flowTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "flowTime",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "pressure",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pressure",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "temperature",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "temperature",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "rawValue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rawValue",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "runTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runTime",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MoviesSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_table_rdm_ReadingRawDy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]",
				"[concat(variables('factoryId'), '/datasets/SQL_table_rdm_ReadingRawDy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB.csv",
						"fileSystem": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_writeReadingRawDy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataGateway",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "writeReadingRawDy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataGateway')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_table_rdm_ReadingRawDy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "rowSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "retries",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "rejectedReasonCode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "objName",
						"type": "nvarchar"
					},
					{
						"name": "orgName",
						"type": "nvarchar"
					},
					{
						"name": "meterId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "localTime",
						"type": "nvarchar"
					},
					{
						"name": "timeFormat",
						"type": "nvarchar"
					},
					{
						"name": "userName",
						"type": "nvarchar"
					},
					{
						"name": "editStateName",
						"type": "nvarchar"
					},
					{
						"name": "unitProfileName",
						"type": "nvarchar"
					},
					{
						"name": "dqInfoName",
						"type": "nvarchar"
					},
					{
						"name": "volume",
						"type": "float",
						"precision": 15
					},
					{
						"name": "energy",
						"type": "float",
						"precision": 15
					},
					{
						"name": "flowTime",
						"type": "real",
						"precision": 7
					},
					{
						"name": "pressure",
						"type": "real",
						"precision": 7
					},
					{
						"name": "temperature",
						"type": "real",
						"precision": 7
					},
					{
						"name": "rawValue",
						"type": "float",
						"precision": 15
					},
					{
						"name": "intermediateValue",
						"type": "float",
						"precision": 15
					},
					{
						"name": "primaryFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "waterVaporFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "volumeAccum",
						"type": "float",
						"precision": 15
					},
					{
						"name": "energyAccum",
						"type": "float",
						"precision": 15
					},
					{
						"name": "miscValue",
						"type": "float",
						"precision": 15
					},
					{
						"name": "time",
						"type": "int",
						"precision": 10
					},
					{
						"name": "offset",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "validate",
						"type": "char"
					},
					{
						"name": "chartLabelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "isSummer",
						"type": "char"
					},
					{
						"name": "runTime",
						"type": "real",
						"precision": 7
					},
					{
						"name": "adjustmentCodeName",
						"type": "nvarchar"
					},
					{
						"name": "mass",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Zratio",
						"type": "float",
						"precision": 15
					},
					{
						"name": "hydrocarbonDewpoint",
						"type": "float",
						"precision": 15
					},
					{
						"name": "uncorrVolAccum",
						"type": "float",
						"precision": 15
					},
					{
						"name": "gqId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "gqTimeReverse",
						"type": "int",
						"precision": 10
					},
					{
						"name": "gqLastModTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "gqHistoryTypeCode",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "rawValueAccum",
						"type": "float",
						"precision": 15
					},
					{
						"name": "hostDaily",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "fieldDaily",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "hostMonthly",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "fieldMonthly",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "rdm_ReadingRawDy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_2pj')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "measadvtestftp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "learningLabFileImport.xml"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/measadvtestftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLSGen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureSqlDatabase1_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataGateway')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('DataGateway_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Bearer": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/measadvtestftp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('measadvtestftp_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('measadvtestftp_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "SecureString",
						"value": "[parameters('measadvtestftp_privateKeyContent')]"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('measadvtestftp_passPhrase')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SourceDataset_2pj",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_table_rdm_ReadingRawDy",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to rdm_ReadingRawDy"
						},
						{
							"dataset": {
								"referenceName": "SQL_table_rdm_ReadingRawDy",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MeasData as (Reading as (absolutePressure as (value as double), differentialPressure as (value as short), downstreamPressure as (value as double), downstreamTemperature as (value as double), editState as string, fieldTime as string, flowTime as (value as short), granularity as string, name as string, organization as string, pulseCount as integer, runTime as (value as short), scadaDataQuality as string, temperature as (value as double), upstreamPressure as (value as double), upstreamTemperature as (value as double))[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true) ~> source1",
						"flatten1 split(!isNull(differentialPressure),",
						"     !isNull(pulseCount),",
						"     disjoint: false) ~> split1@(diff, pulse, Unknown)",
						"source1 foldDown(unroll(MeasData.Reading, MeasData.Reading),",
						"     mapColumn(",
						"          name = MeasData.Reading.name,",
						"          organization = MeasData.Reading.organization,",
						"          granularity = MeasData.Reading.granularity,",
						"          fieldTime = MeasData.Reading.fieldTime,",
						"          pulseCount = MeasData.Reading.pulseCount,",
						"          differentialPressure = MeasData.Reading.differentialPressure.value,",
						"          scadaDataQuality = MeasData.Reading.scadaDataQuality,",
						"          editState = MeasData.Reading.editState,",
						"          flowTime = MeasData.Reading.flowTime.value,",
						"          runTime = MeasData.Reading.runTime.value,",
						"          absolutePressure = MeasData.Reading.absolutePressure.value,",
						"          temperature = MeasData.Reading.temperature.value,",
						"          downstreamPressure = MeasData.Reading.downstreamPressure.value,",
						"          downstreamTemperature = MeasData.Reading.downstreamTemperature.value,",
						"          upstreamPressure = MeasData.Reading.upstreamPressure.value,",
						"          upstreamTemperature = MeasData.Reading.upstreamTemperature.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"split1@diff sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          rowSequence as integer,",
						"          retries as integer,",
						"          rejectedReasonCode as integer,",
						"          objName as string,",
						"          orgName as string,",
						"          meterId as integer,",
						"          localTime as string,",
						"          timeFormat as string,",
						"          userName as string,",
						"          editStateName as string,",
						"          unitProfileName as string,",
						"          dqInfoName as string,",
						"          volume as double,",
						"          energy as double,",
						"          flowTime as float,",
						"          pressure as float,",
						"          temperature as float,",
						"          rawValue as double,",
						"          intermediateValue as double,",
						"          primaryFactor as double,",
						"          waterVaporFactor as double,",
						"          volumeAccum as double,",
						"          energyAccum as double,",
						"          miscValue as double,",
						"          time as integer,",
						"          offset as integer,",
						"          validate as string,",
						"          chartLabelId as integer,",
						"          isSummer as string,",
						"          runTime as float,",
						"          adjustmentCodeName as string,",
						"          mass as double,",
						"          Zratio as double,",
						"          hydrocarbonDewpoint as double,",
						"          uncorrVolAccum as double,",
						"          gqId as integer,",
						"          gqTimeReverse as integer,",
						"          gqLastModTime as timestamp,",
						"          gqHistoryTypeCode as integer,",
						"          rawValueAccum as double,",
						"          hostDaily as timestamp,",
						"          fieldDaily as timestamp,",
						"          hostMonthly as timestamp,",
						"          fieldMonthly as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 1000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          objName = name,",
						"          orgName = organization,",
						"          localTime = fieldTime,",
						"          editStateName = editState,",
						"          dqInfoName = scadaDataQuality,",
						"          flowTime,",
						"          pressure = absolutePressure,",
						"          temperature,",
						"          rawValue = differentialPressure,",
						"          runTime",
						"     )) ~> sink1",
						"split1@pulse sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          rowSequence as integer,",
						"          retries as integer,",
						"          rejectedReasonCode as integer,",
						"          objName as string,",
						"          orgName as string,",
						"          meterId as integer,",
						"          localTime as string,",
						"          timeFormat as string,",
						"          userName as string,",
						"          editStateName as string,",
						"          unitProfileName as string,",
						"          dqInfoName as string,",
						"          volume as double,",
						"          energy as double,",
						"          flowTime as float,",
						"          pressure as float,",
						"          temperature as float,",
						"          rawValue as double,",
						"          intermediateValue as double,",
						"          primaryFactor as double,",
						"          waterVaporFactor as double,",
						"          volumeAccum as double,",
						"          energyAccum as double,",
						"          miscValue as double,",
						"          time as integer,",
						"          offset as integer,",
						"          validate as string,",
						"          chartLabelId as integer,",
						"          isSummer as string,",
						"          runTime as float,",
						"          adjustmentCodeName as string,",
						"          mass as double,",
						"          Zratio as double,",
						"          hydrocarbonDewpoint as double,",
						"          uncorrVolAccum as double,",
						"          gqId as integer,",
						"          gqTimeReverse as integer,",
						"          gqLastModTime as timestamp,",
						"          gqHistoryTypeCode as integer,",
						"          rawValueAccum as double,",
						"          hostDaily as timestamp,",
						"          fieldDaily as timestamp,",
						"          hostMonthly as timestamp,",
						"          fieldMonthly as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          objName = name,",
						"          orgName = organization,",
						"          localTime = fieldTime,",
						"          editStateName = editState,",
						"          dqInfoName = scadaDataQuality,",
						"          flowTime,",
						"          pressure = absolutePressure,",
						"          temperature,",
						"          rawValue = pulseCount,",
						"          runTime",
						"     )) ~> sink2",
						"split1@diff sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'readingDyDiff[n]',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          objName = name,",
						"          orgName = organization,",
						"          localTime = fieldTime,",
						"          rawValue = differentialPressure,",
						"          dqInfoName = scadaDataQuality,",
						"          editStateName = editState,",
						"          flowTime,",
						"          runTime,",
						"          pressure = absolutePressure,",
						"          temperature",
						"     )) ~> sink3",
						"split1@pulse sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'readingDyPulse[n]',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          objName = name,",
						"          orgName = organization,",
						"          localTime = fieldTime,",
						"          rawValue = pulseCount,",
						"          dqInfoName = scadaDataQuality,",
						"          editStateName = editState,",
						"          flowTime,",
						"          runTime,",
						"          pressure = absolutePressure,",
						"          temperature",
						"     )) ~> sink4"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_2pj')]",
				"[concat(variables('factoryId'), '/datasets/SQL_table_rdm_ReadingRawDy')]",
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]"
			]
		}
	]
}