{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceDataset_2pj",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQL_table_rdm_ReadingRawDy",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"description": "Export data to rdm_ReadingRawDy"
				},
				{
					"dataset": {
						"referenceName": "SQL_table_rdm_ReadingRawDy",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "REST_writeReadingRawDy",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "REST_writeReadingRawDy",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MeasData as (Reading as (absolutePressure as (value as double), differentialPressure as (value as short), downstreamPressure as (value as double), downstreamTemperature as (value as double), editState as string, fieldTime as string, flowTime as (value as short), granularity as string, name as string, organization as string, pulseCount as integer, runTime as (value as short), scadaDataQuality as string, temperature as (value as double), upstreamPressure as (value as double), upstreamTemperature as (value as double))[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true) ~> source1",
				"flatten1 split(!isNull(differentialPressure),",
				"     !isNull(pulseCount),",
				"     disjoint: false) ~> split1@(diff, pulse, Unknown)",
				"source1 foldDown(unroll(MeasData.Reading, MeasData.Reading),",
				"     mapColumn(",
				"          name = MeasData.Reading.name,",
				"          organization = MeasData.Reading.organization,",
				"          granularity = MeasData.Reading.granularity,",
				"          fieldTime = MeasData.Reading.fieldTime,",
				"          pulseCount = MeasData.Reading.pulseCount,",
				"          differentialPressure = MeasData.Reading.differentialPressure.value,",
				"          scadaDataQuality = MeasData.Reading.scadaDataQuality,",
				"          editState = MeasData.Reading.editState,",
				"          flowTime = MeasData.Reading.flowTime.value,",
				"          runTime = MeasData.Reading.runTime.value,",
				"          absolutePressure = MeasData.Reading.absolutePressure.value,",
				"          temperature = MeasData.Reading.temperature.value,",
				"          downstreamPressure = MeasData.Reading.downstreamPressure.value,",
				"          downstreamTemperature = MeasData.Reading.downstreamTemperature.value,",
				"          upstreamPressure = MeasData.Reading.upstreamPressure.value,",
				"          upstreamTemperature = MeasData.Reading.upstreamTemperature.value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"split1@diff sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          rowSequence as integer,",
				"          retries as integer,",
				"          rejectedReasonCode as integer,",
				"          objName as string,",
				"          orgName as string,",
				"          meterId as integer,",
				"          localTime as string,",
				"          timeFormat as string,",
				"          userName as string,",
				"          editStateName as string,",
				"          unitProfileName as string,",
				"          dqInfoName as string,",
				"          volume as double,",
				"          energy as double,",
				"          flowTime as float,",
				"          pressure as float,",
				"          temperature as float,",
				"          rawValue as double,",
				"          intermediateValue as double,",
				"          primaryFactor as double,",
				"          waterVaporFactor as double,",
				"          volumeAccum as double,",
				"          energyAccum as double,",
				"          miscValue as double,",
				"          time as integer,",
				"          offset as integer,",
				"          validate as string,",
				"          chartLabelId as integer,",
				"          isSummer as string,",
				"          runTime as float,",
				"          adjustmentCodeName as string,",
				"          mass as double,",
				"          Zratio as double,",
				"          hydrocarbonDewpoint as double,",
				"          uncorrVolAccum as double,",
				"          gqId as integer,",
				"          gqTimeReverse as integer,",
				"          gqLastModTime as timestamp,",
				"          gqHistoryTypeCode as integer,",
				"          rawValueAccum as double,",
				"          hostDaily as timestamp,",
				"          fieldDaily as timestamp,",
				"          hostMonthly as timestamp,",
				"          fieldMonthly as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 1000,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          objName = name,",
				"          orgName = organization,",
				"          localTime = fieldTime,",
				"          editStateName = editState,",
				"          dqInfoName = scadaDataQuality,",
				"          flowTime,",
				"          pressure = absolutePressure,",
				"          temperature,",
				"          rawValue = differentialPressure,",
				"          runTime",
				"     )) ~> sink1",
				"split1@pulse sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          rowSequence as integer,",
				"          retries as integer,",
				"          rejectedReasonCode as integer,",
				"          objName as string,",
				"          orgName as string,",
				"          meterId as integer,",
				"          localTime as string,",
				"          timeFormat as string,",
				"          userName as string,",
				"          editStateName as string,",
				"          unitProfileName as string,",
				"          dqInfoName as string,",
				"          volume as double,",
				"          energy as double,",
				"          flowTime as float,",
				"          pressure as float,",
				"          temperature as float,",
				"          rawValue as double,",
				"          intermediateValue as double,",
				"          primaryFactor as double,",
				"          waterVaporFactor as double,",
				"          volumeAccum as double,",
				"          energyAccum as double,",
				"          miscValue as double,",
				"          time as integer,",
				"          offset as integer,",
				"          validate as string,",
				"          chartLabelId as integer,",
				"          isSummer as string,",
				"          runTime as float,",
				"          adjustmentCodeName as string,",
				"          mass as double,",
				"          Zratio as double,",
				"          hydrocarbonDewpoint as double,",
				"          uncorrVolAccum as double,",
				"          gqId as integer,",
				"          gqTimeReverse as integer,",
				"          gqLastModTime as timestamp,",
				"          gqHistoryTypeCode as integer,",
				"          rawValueAccum as double,",
				"          hostDaily as timestamp,",
				"          fieldDaily as timestamp,",
				"          hostMonthly as timestamp,",
				"          fieldMonthly as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          objName = name,",
				"          orgName = organization,",
				"          localTime = fieldTime,",
				"          editStateName = editState,",
				"          dqInfoName = scadaDataQuality,",
				"          flowTime,",
				"          pressure = absolutePressure,",
				"          temperature,",
				"          rawValue = pulseCount,",
				"          runTime",
				"     )) ~> sink2",
				"split1@diff sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     insertHttpMethod: 'POST',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     requestFormat: ['type' -> 'json'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          objName = name,",
				"          orgName = organization,",
				"          localTime = fieldTime,",
				"          rawValue = differentialPressure,",
				"          dqInfoName = scadaDataQuality,",
				"          editStateName = editState,",
				"          flowTime,",
				"          runTime,",
				"          pressure = absolutePressure,",
				"          temperature",
				"     )) ~> sink3",
				"split1@pulse sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     insertHttpMethod: 'POST',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     requestFormat: ['type' -> 'json'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          objName = name,",
				"          orgName = organization,",
				"          localTime = fieldTime,",
				"          rawValue = pulseCount,",
				"          dqInfoName = scadaDataQuality,",
				"          editStateName = editState,",
				"          flowTime,",
				"          runTime,",
				"          pressure = absolutePressure,",
				"          temperature",
				"     )) ~> sink4"
			]
		}
	}
}